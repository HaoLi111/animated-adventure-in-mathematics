---
title : Random Points
date : 05/25/020
author : Hao Li
bibliography: biblio.bib
---



## Gaussian Distribution

### Random Points


$$
X ~ N(0,1)
$$


```julia
cd("D:/animated-adventure-in-mathematics/")# state working directory to save

include("themes.jl");
mkdir("RandPts")
cd("RandPts")
using Plots     # load package

using Distributions


n = 1000        # number of pts
r_x = randn(n)  # rand with normal distribution
r_y = zeros(n)  # we have to specify y location, otherwise the plot package thinks we are plotting time series
Plots.scatter!(theme_dark(),r_x,r_y;alpha = .2,ylim = (-.5,.5))
savefig("ch1-1-1dscatter.png")
```


```julia

#r_x = randn(n)  # rand with normal distribution
r_y = randn(n)  # we have to specify y location, otherwise the plot package thinks we are plotting time series

Plots.scatter!(theme_dark(),r_x,r_y;alpha = .2, aspect_ratio = [1 1])
savefig("2dscatter3.png")
```



```julia
r_z = randn(n)  # we have to specify y location, otherwise the plot package thinks we are plotting time series
Plots.scatter!(theme_dark(),r_x,r_y,r_z;alpha = .2,aspect_ratio = 1)
savefig("3dscatter.png")
```


```julia
cd("D:/animated-adventure-in-mathematics/")
```

## Area with Monte-Carlo




## Central Limit Thrm 
To Do


## Diffusions

```julia

n = 16
nStep = 2^7
x = zeros(Float64,nStep,3,n)
for i in 1:3, j in 1:n
    x[:,i,j] = cumsum(rand(Cauchy(),nStep))
end

using Plots
t1=time()
pyplot()
a = @animate for i in 1:nStep
    p=Plots.plot(x[1:i,1,:],x[1:i,2,:],x[1:i,3,:];xlabel = "x",ylabel = "y",zlabel = "z",
    key = false,colorkey =true,grid=(1, 0.9),bg_color=:black,fg_color = RGB1(.7,.7,1),size=(1080,720),dpi=150)
    Plots.title!(p,"Step $i")
end every 16

mp4(a,"Levy_FlightMult.mp4")
time()-t1



n = 16
nStep = 2^16
x = zeros(Float64,nStep,3,n)
for i in 1:3, j in 1:n
    x[:,i,j] = cumsum(randn(nStep))
end

using Plots
t1=time()
pyplot()
a = @animate for i in 1:nStep
    p=Plots.plot(x[1:i,1,:],x[1:i,2,:],x[1:i,3,:];xlabel = "x",ylabel = "y",zlabel = "z",
    key = false,colorkey =true,grid=(1, 0.9),bg_color=:black,fg_color = RGB1(.7,.7,1),size=(1080,720),dpi=150)
    Plots.title!(p,"Step $i")
end every 16

mp4(a,"Brownian_FlightMult.mp4")
time()-t1
```